(ns website.ai
  (:use [dk.ative.docjure.spreadsheet]
        [clojure.pprint]
        [clojure.string]
        [clojure.java.io]
        [clojure.java.shell :only [sh]]
        [clojure.xml])
  (:require [clojure.data.json :as json]
            [clj-http.client :as client]
            [clj-http.cookies :as cookies]
            [clj-time.format :as f]
            [clj-time.coerce :as c]
            [clj-time.local :as l]
            [clojure.string :as s]
            [ring.adapter.jetty :as jetty]
            [clj-time.periodic :as p]
            [clojure.pprint :as ppt]
            [clj-sockets.core :refer [create-socket write-to close-socket
                                      read-line read-lines write-line]]
            ))
(require '[clojure.core.matrix :as m]
         '[clojure.core.matrix.protocols :as mp]
         '[vizard [core :refer :all] [plot :as plot]])
(import '[java.util Random])


(def X (atom []))
(def WXH (atom []))
(def H (atom []))
(def WHY (atom []))
(def Y (atom []))



(defn plus-ai[a b]
  (let[bin-arr #(str (Integer/toBinaryString %1))
       input (reduce #(clojure.string/split (str (bin-arr %1) (bin-arr %2)) #"") [a b])
       ]
  input))

(plus-ai 1 2)

(str (Integer/toBinaryString 1024))




