(ns hook.core
    (:use [clojure.java.io])
  (:use [clojure.java.shell :only [sh]])
  (:use [clojure.xml])
  (:require [clojure.data.json :as json])
  (:require [clj-http.client :as client])
  (:require [clj-http.cookies :as cookies])
  (:require [clj-time.format :as f])
  (:require [clj-time.coerce :as c])
  (:require [clj-time.local :as l])
  (:require [clojure.string :as s])
  (:require [ring.adapter.jetty :as jetty])
  (:require [clj-time.periodic :as p])
  (:require [clojure.pprint :as ppt]))


(def hook-dll "hook dll for wireless" "d:/MyConfiguration/lzy13870/Documents/branchs/hook/resources/TCWireless.TCMobileAPI.AbroadActivity.dll")


(def deviceids ["1106e0c19bbfbe8d4f7f4cc6285c1ab07edc2d3c" "c2ea535fb19e1230784848bf1a61f4f4a1a6afb" "37a59e7a0b1cc0c4" "eb32616e32ae285a21ec8242ea2dfdd0fc7000a6" "6ee6d81d81e5bea8" "dd5d46f711ede1217ec41d67887b1d9ed51f91d4" "82229162d95f7e8e" "fcf57b9dfc6b98499a8589f673d876a0671b8dc7" "5d83ce0f4e446dbc" "d97f90da666b88f9" "9b92a64d1e31fa1dc34817b82e63721561cac556" "5a218e96e60c94b9" "1f701e13c5308d542491fda3c0ac0a0f1472332d" "4e5761928c9b1612" "6642808e7c3262fdaf51bcfa3ee4aec6956eaa89" "006346902b84448967ced884bc1691143b1b20d2" "14d37a9aee1a606541280c39926bfc6f2093a03f" "dca0722a079a8fe2" "f69b8173c004ba9" "223b8e4f3d6e41762611de78bca20d28b393e188" "7d2f1ca32b24abd6ecdcb08b9757b3ec36427aa4" "68fd3c7d9ea9630b" "e7caedd298db2b0" "06E1A924-C2E5-49CA-A8DB-496CBD1DB3BF" "5f6f7430d83a1fa72221b16228fa97f59758ce21" "9ce40e073ca61c44" "d2964656aafa7fce" "a8e7434145982306" "1c5bcbca1ab0aa74" "f9ceec0a0efcda8f" "b5cd0048cd4c6390" "20ffb7ea86c15b5c" "9ba35e35ec682bfd" "1894a1dce5d50447610d34ab62f4dac2eba2e" "a6dfd7dc0f1acc36" "628888349928f79a84ad3e245023ae402816d297" "91fd4d1f5a8bb54c" "a358929a5eacd36c4267cbd1e7d9aad2cc7ac824" "4642AA04-2BBC-411D-9DDF-7D99627A36A5" "8311f8f2ae8c17f7aa348f42313a39acd6d617de" "131deea915be8555" "f436e94ce6de7f11820f1f0b3422cae85c8cdbf0" "a855b50e8acc9f04736da7b8b3f9863a88050101" "CF457396-FEEC-4D25-AE40-A14220E10FFC" "a6774d612b365f7" "52b795562139656c" "72c40bac1fed15f" "5cedc84d5a199ae5" "aa278aae4eaf13d2" "7ce8405cab71bbf98f8ca5c318420667686931d4" "a6fa6fe279ea94bbd34c5ee3214a5e24b96984a8" "5f52b4813a608d47" "a1a67b01c7abaf45" "FE669F8A-B909-4E06-B0D5-9486264161A4" "e142d3976c6f3ec0" "fd8ca0ba2b62eb98" "ccc843af24e40e7f" "9b173da9c615954a6ce9caac0565656e233966f0" "A000004559D1F7" "9fa33fad185fc35" "f265d777229e9f04" "216b614e4124309b" "d259dd3341872ae8" "d7d2bf3b89a37f57871850b6a716c2c5859c5b28" "776a7e50e5836bda" "c548700007bdf445" "d5e8b7cce661ddde65ddd9dff8aa72c390096f28" "bd76f62a13044e61" "F2085DE4-C014-462F-9CB0-E2C3581E9E97" "7c6cf1b08274ce75" "43f56d8cfc37d0bd" "c2b3ca838fc6c80086817224607c742b1449661c" "55650f9f4ddf08d2" "22afb49dba4c09fb" "8e9e20197a5f9a28" "fa3417d7ca69e816" "f2c95e80e8a943e9" "d35336dbd7d1df71835ad2ed83c8d5b8381f0562" "76a5341d81122d84733827245d6e031d3bc7fb57" "b5c59798b215fbb7" "57cc749834b6bf09a47792fb8376963cbccf4276" "d97a4b9114cedf7a" "56c4af031079453" "535c3411297f9217" "88be67a451908602" "788acb71a86ff60b3063f5aa37b3b15af7ce62f4" "1f154da850eb3bb04bb6d0f023933dcf9748d605" "db651e30cfcc3b5a" "c75bee643bedbf47f6e23e1ffd3981ce84e103bd" "ee75d3df37913f1c" "4a4a743dca7e812d26c74c7afb70f494d5a61242" "97B34695-B383-45B6-AA59-D6EDA1682034" "700c78df203ab9fc" "81d98ebb4237143e" "0db3bc133d00f8371ad056c789dd0bb3b20ab6d2" "1e6a1c3ddfb54d39" "71890c0a1a7b3b75d424b55212c30aa993540e9c" "1002c59c7b5cc03d" "622edc13f747801b" "fdbc42c138598213"])

(defn response[entity] (-> entity :response :response))
(defn request[entity] (-> entity :request :request))
(defn service-name[entity] (-> entity request :header :serviceName))
(defn header[entity] (-> entity response :header))
(defn rsp-desc[entity] (-> entity header :rspDesc))
(defn body[entity] (-> entity response :body))

(defn is-field-empty[ent v]
  (or (and (string? (get ent v))
           (= (.length (get ent v)) 0))
      (and (vector? (get ent v))
           (= (count (get ent v)) 0))))


(def default-params{:productId "18874"
                    :specialId 7
                    :subProductId 260521
                    :resourceId 260512
                    :memberId "I0_ba8e71171ab462d7d42b5c8977fe5e62"
                    :orderId 2170672
                    :playTheme 13
                    :supplierRelationId "49675"
                    :srcCityId 226
                    :page 1
                    :pageSize 10
                    :DestType 2
                    :dest "东京"
                    :sstype 1})


(def config
  "Global configuration entity."
  (load-file
   "d:/MyConfiguration/lzy13870/Desktop/ringfullsite/ringfullsite/src/website/config.clj"))

(def vm-abroadactivity
  "Virtual machine abroadactivity url."
  (str (-> config :domains :vm)
       (-> config :handlers :abroadactivity)))

(defn show-sp-name[en]
  (for [v en] (:name v)))

(defn call[url input]
  (let[rsp-text (->
   "http://localhost:8008/abroadactivity/default.aspx"
   (client/post {:form-params {:url url :input input}})
   )]
    (if (= (:status rsp-text) 200)
      (:body rsp-text)
      (:status rsp-text))
    ))



(defn save-request[request output]
  (let [client-info-summary (str
                             \- (-> request :request :header :serviceName)
                             \- (-> request :request :body :clientInfo :versionType)
                             \- (-> request :request :body :clientInfo :versionNumber)
                             \- (-> request :request :body :clientInfo :networkType)
                             \- (l/format-local-time (l/local-now) :date)
                             ".clj")
        build-path #(str (-> config :project-folder) "/" % client-info-summary)]
    (spit (build-path "request") (str request))
    (spit (build-path "response") (str (json/read-str output :key-fn keyword)))))

(defn call-service
  ([params service client version url] (call-service params service client version url (first deviceids)))
  ([params service client version url deviceid]
  (let [request {:request
                 {:body
                  (into {:clientInfo
                         {:deviceId deviceid,
                          :extend (str "2^com.tongcheng." client ",4^9.0.2,5^" client "6_2"),
                          :mac "cacdca6fcf78998b8ba745400a0eb92c",
                          :refId "5866741",
                          :versionType (str client),
                          :clientIp "10.6.2.52",
                          :networkType "wifi",
                          :versionNumber (clojure.string/join "." (clojure.string/split (str version) #""))}}
                        params),
                  :header {:accountID "5ee7b429-b8c6-400f-8b87-3c384c4ea68a",
                           :encryptEffort "0",
                           :serviceName (str service),
                           :reqTime "1444725647927",
                           :version "20110303090115"}}}
        ]
    (println url)
    (println (json/write-str request))
    {:request request
     :response (let[rsp-text (call url (json/write-str request))]
                 (->> (json/read-str rsp-text :key-fn keyword) :response :header :rspDesc (str service " ") println)
                 (json/read-str rsp-text :key-fn keyword))
     :url url}
    )))





(def abroad (-> config :handlers :abroadactivity))

(defn call-default
  ([sv] (call-default {} sv))
  ([sv params] (call-service params sv "iphone" "804" (str (-> config :domains :vm) abroad)))
  ([sv params version deviceid] (call-service params sv "iphone" "804" (str (-> config :domains :vm) abroad) deviceid))
  ([sv params version] (call-service params sv "iphone" (str version) (str (-> config :domains :vm) abroad))))

(defn call-8008
  ([sv params]
   (call-service params sv "iphone" "804" (str (-> config :domains :test8008) abroad)))
  ([sv params version deviceid]
   (call-service params sv "iphone" version (str (-> config :domains :test8008) abroad) deviceid))
  ([sv params version](call-service params sv "iphone" (str version) (str (-> config :domains :test8008) abroad))))

(defn call-8018
  ([sv params] (call-service params sv "iphone" "804" (str (-> config :domains :test8018) abroad)))
  ([sv params version] (call-service params sv "iphone" (str version) (str (-> config :domains :test8018) abroad))))

(defn call-online[sv params] (call-service params sv "iphone" "804" (str (-> config :domains :online) abroad)))

(defn run-in-output[service]
  (let[folder "d:/MyConfiguration/lzy13870/output/" 
       params {:productId "19358"
               :specialId 7
               :memberId "I0_ba8e71171ab462d7d42b5c8977fe5e62"
               :orderId 2170672
               :supplierRelationId 64178
               :dest "东京"
               :sstype 1}]
    (spit
     (str folder service "_8008.json")
     (call-default service params)
     )
    (spit
     (str folder service "_default.json")
     (call-default service params)
     )
    )
  )


;; (->> (call-default 'getpricecalendar default-params 804 "1106e0c19bbfbe8d4f7f4cc6285c1ab07edc2d3c") body)



;; (->> (call-default 'getabroadwifiindex {} '804 (first deviceids)) body)
;; (for [id deviceids] (->> (call-default 'getabroadwifiindex {} '804 id) body :abtest (str id " : ") println))
;; (for [id deviceids] (->> (call-default 'getabroadproductlist {} '804 id) body :abroadProductList first :abtest (str id " : ") println))


;; (->> (call-default 'getpricecalendar default-params '804 (first deviceids)) body ppt/pprint)

;; (->> (call-default 'getabroadproductlistwifi default-params '804 (first deviceids)) body :abroadProductList  (reduce #(str %1 \| (:productId %2))) ppt/pprint)

;; (->> (call-default 'getabroadwifiindex default-params '804 (first deviceids)) body :todayRecommendList ppt/pprint)

(defn getabroaddetail-default[id]
  (->> (call-default 'getabroaddetail {:productId id} '804 (first deviceids)) body))

(defn getabroadproductlistnew-default[params]
  (->> (call-default 'getabroadproductlistnew params '804 (first deviceids)) body))

;; (->> (call-default 'getabroadproductlistnew {:playTheme 13} '804 (first deviceids)))

;; (getabroadproductlistnew-default {:playTheme 2})



;; (->> (call-default
;;       'getspecialdetail{:requestFrom "H5" :specialId "10" :sstype "1" } '804 (first deviceids))
;;      body :productListNew ppt/pprint)

(defn getabroadproductlist-default[params]
  (->> (call-default 'getabroadproductlist params '804 (first deviceids)) body))


(defn get-all-products
  ([] (let[page-info (->> (getabroadproductlist-default default-params) :pageInfo)
           total (int (->> page-info :totalCount))
           page-size (int (->> page-info :pageSize))]
        (for [idx (range (/ total page-size))]
          (into (get-all-products idx) (get-all-products (inc idx)))
          )))
  ([idx]
   (->> (getabroadproductlist-default {:page idx}) :abroadProductList)))




;; (def all-products (let[products (get-all-products)] (when products (reduce into products))))

;; (def product-ids (for [v (->> all-products)]
;;                    (->> v :productId)))

;; (def product-details (for [id product-ids]
;;                        (getabroaddetail-default id)
;;                        ))


;; (->>  (call-default 'getpricecalendar {:supplierRelationId "56753" :productId "293846"} '804 (first deviceids)) body :calendarList ppt/pprint)


(defn iter-show[p coll]
  (for [c coll] (p c)))






;; (->> (call-default 'getabroadproductlistwifi {:Dest 18775} '804 (first deviceids)) body
;;      ppt/pprint)

;; (->> (call-default 'getabroaddetail {:Dest 18775} '804 (first deviceids)) 
;;      ppt/pprint)

;; (->> (call-default 'getabroadwifiindex {} '804 (first deviceids)) body
;;      :areaDestList
;;      (iter-show :cityLinkUrl)
;;      println
;;      ;; ppt/pprint
;;      )



;; (->> (call-default 'getabroadindex
;;                 {:productId 16937} ;; ,18204,17858,12462,20086,20229,19910,18054,18080,20130
;;                 '804
;;                 (first deviceids))
;;      body
;;      :areaDestList
;;      (iter-show :areaName)
;;      println
;;      )


;; (->> (call-default 'getabroadwifiindex
;;                 {:productId 16937} ;; ,18204,17858,12462,20086,20229,19910,18054,18080,20130
;;                 '804
;;                 (first deviceids))
;;      body
;;      ;; :key
;;      :todayRecommendList
;;      ppt/pprint
;;      )

;; (->>  (call-default 'getpricecalendar {:supplierRelationId "56753" :productId "293846"} '804 (first deviceids)) body :calendarList)

;; (defn check-fields
;;   ([ent] (let[rsp (->>
;;                    (for [v (keys ent)]
;;                      (cond (is-field-empty ent v) v
;;                            (map? (get ent v)) (check-fields (get ent v))
;;                            (vector? (get ent v)) (->>
;;                                                   (for [item (get ent v)]
;;                                                     (cond (map? item) (check-fields item)))
;;                                                   (remove nil?) set)))
;;                    (remove nil?)
;;                    set)]
;;            (cond (vector? rsp) (->> rsp (remove nil?) (reduce into) set)
;;                  (not (nil? rsp)) rsp))))

;; (defn check-body[ent]
;;   (->> (remove nil? (check-fields ent)) set))

;; (->>  (call-default 'getpricecalendar {:supplierRelationId "56753" :productId "293846"} '804 (first deviceids)) body check-body ppt/pprint)

;; (for [service [
;;                ;; "submitabroadorder"	;; 提交订单接口	2016
;;                ;; "getabroadorderpayment"	;; 订单详情接口	2016
;;                ;; "getabroadorder"	;; 订单详情	2016
;;                "getabroadproductlistnew"	;; 新爆款推荐接口	2016
;;                "getphonecard"	;; 电话卡专题页	2016
;;                "getabroaddetail"	;; 获取海外玩乐产品详情	2016
;;                "getspecialdetail"	;; 专题详情	2016
;;                "getabroadproductlistwifi"	;; WIFI列表页
;;                "getdetailforcomments"	;; 获取点评填写页数据	2016
;;                "getabroaddeststaticlist"	;; 目的地静态数据接口	2016
;;                "getdetailforsubmit"	;; 订单填写页数据提供	2016
;;                "getsubproductdetail"	;; 获取子产品详情	2016
;;                "getabroadwifiindex"	;; 获取玩乐wifi
;;                "getabroadproductlist"	;; 获取海外玩乐产品列表	2016
;;                "getpricecalendar"	;; 获取价格日历	2016
;;                "getabroadindex"	;; 新首页	2016
;;                "getabroaddestindex"	;; 海外玩乐目的地首页	2015
;;                "getproductlist"	;; 获取产品列表	2015
;;                "getabroadindex"	;; 获取玩乐首页	2015
;;                "getabroadservice"	;; 获取海外玩乐产品资源服务	2015
;;                "getabroaddestlist"	;; 获取首页目的地列表接口	2015
;;                "getabroadstatisticslist"	;; 获取海外玩乐列表汇总	2015
;;                ]
;;       ]
;;   (-> service (call-default default-params 803 "1106e0c19bbfbe8d4f7f4cc6285c1ab07edc2d3c") body check-body ppt/pprint))

;; (->> (call-default 'getspecialdetail {:specialId 7 :sstype 1} 804 "aa") body ppt/pprint)
;; (->> (call-default 'getabroaddetail {:productId 13795} 804 "aa") body ppt/pprint)
;; (->> (call-default 'getabroadproductlist default-params 804 "aa") body :abroadProductList (iter-show :productId) println)

;; (->> (call-default 'getabroadindex {:sstype 1} 803 "aa") body :areaDestList (iter-show :areaName) println)

;; (->> (call-default 'getabroaddestlist {:specialId 7 :sstype 1 :destType 1 :requestFrom "H5"} 803 "aa") body ppt/pprint)

(->> (call-default 'getabroaddestindex {} '804 (first deviceids)) body)







