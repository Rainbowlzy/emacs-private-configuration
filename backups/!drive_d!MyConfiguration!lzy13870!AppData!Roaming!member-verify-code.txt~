* GetVerificationCode
** handler
   case "tcgetverificationcode"://根据手机号获取验证码
   Register<MemberShipModel>(MembershipService.GetVerificationCode, MembershipVerify.CheckGetVerificationCodeParams);
   break;

** serivce
   MembershipProcessing.GetVerificationCode_New_isMember(model.QueryParams);

** call soa

        /// <summary>
        /// 获取验证码新版（调用CommonInterface，加入website区分手机端不同站点调用）
        /// </summary>
        /// <param name="Params"></param>
        /// <returns></returns>
        public static IResponse GetVerificationCode_New(MembershipParams parameter, bool needVaildMobile = false)
        {
            //由于6.0.0的第三方绑定无法发送验证码，因为新会员的问题，所以需要做个缓存表示
            String cacheKey = "tcwapi.member.socialbindverifycode$" + parameter.Mobile;
            String cacheValue = CacheHelper.GetString(cacheKey);
            if (cacheValue == "1")
            {
                parameter.Sysfun = 1;
            }

            SOAResponseEntity<SoaMemberVaild::ProduceValidateCodeResponse> response = MembershipInterface.GetVerificationCode_New(parameter, needVaildMobile);
            if (response != null && response.Body != null && response.Body.Status != null && response.Body.Status.IsSuccess)
            {
                GetVerificationCodeEntity model = new GetVerificationCodeEntity();
                model.mobile = GetVerificationCodeMobile();
                return new Response(RspType.Success, RspCode.RspCode_0000, "获取成功", model);
            }
            else
            {
                if (response != null && response.Body != null && response.Body.Status != null)
                {
                    String errDetails = String.IsNullOrWhiteSpace(response.Body.Status.ErrMsg) ? "获取失败" : response.Body.Status.ErrMsg;
                    return new Response(RspType.ParameterError, RspCode.RspCode_3001, errDetails, errDetails, response.Body.Status.ErrCode + "");
                }
                else
                {
                    return new Response(RspType.Success, RspCode.RspCode_3001, "获取失败");
                }
            }
        }

** soa

        #region 6.根据手机号获取验证码[GetVerificationCode]

        /// <summary>
        /// 根据手机号获取验证码(新版),调用CommonInterface
        /// </summary>
        /// <param name="Params"></param>
        /// <param name="codeType">生成策略枚举6位，4位</param>
        /// <returns></returns>
        public static SOAResponseEntity<SoaMemberVaild::ProduceValidateCodeResponse> GetVerificationCode_New(MembershipParams parameter, bool needVaildMobile)
        {
            RequestHeaderEntity header = new RequestHeaderEntity("ProduceValidateCode", 1);
            SoaMemberVaild::ProduceValidateCodeRequest request = new SoaMemberVaild::ProduceValidateCodeRequest()
            {
                Act = new SoaMemberVaild::Act()
                {
                    AppKey = parameter.MemberAppKey,
                    AppSecret = parameter.MemberAppSecret
                },
                Mobile = parameter.Mobile,
                MemberSystem = 0,
                NeedVaildMobile = needVaildMobile//false不去根据手机号匹配会员Id,true会根据手机号匹配会员Id，找回密码时使用
            };
            request.UseMyCode = true;
            if (parameter.ClientInfo.VersionNumberConversion >= 760)
            {
                request.MyCodeType = SoaMemberVaild.MyCodeType.Number_4;
            }
            else
            {
                request.MyCodeType = SoaMemberVaild.MyCodeType.Number_6;
            }
            
            if (parameter.AppPlat == "1")//朋友去哪
            {
                request.PlatId = 1;
                request.SysFunction = 153;
            }
            else
            {
                request.PlatId = 418;
                request.SysFunction = 600;
            }
            var response = SOAHttpHelper.GetResposne<SoaMemberVaild::ProduceValidateCodeResponse>(request, header);
            return response;
        }
        #endregion

* ConfirmVerificationCodeMember
** handler
   case "confirmverificationcodemember"://8.确认验证码(找回密码功能专用)
   Register<MemberShipModel>(MembershipService.ConfirmVerificationCodeMember, MembershipVerify.ConfirmVerificationCode);
   break;

** service
   return MembershipProcessing.ConfirmVerificationCode_Member(model.QueryParams);

** call soa

        #region 8.确认验证码[ConfirmVerificationCode]
        /// <summary>
        /// 确认验证码新版（调用CommonInterface，加入website区分手机端不同站点调用）
        /// </summary>
        /// <param name="Params"></param>
        /// <returns></returns>
        public static IResponse ConfirmVerificationCode_New(MembershipParams parameter)
        {
            SOAResponseEntity<SoaMemberVaild::MatchValidateCodeResponse> response = MembershipInterface.ConfirmVerificationCode_New(parameter);
            if (response != null && response.IsRequestSuccess && response.Body != null && response.Body.Status != null && response.Body.Status.IsSuccess)
            {
                return new Response(RspType.Success, RspCode.RspCode_0000, "确认成功");
            }
            else
            {
                //"14200", "验证码失效"
                //"14201", "验证码不匹配"
                //"14202", "对不起，您的验证码已累计输错{0}次，请重新点击生成验证码
                RspCode code = RspCode.RspCode_1000;
                if (response.Body != null && response.Body.Status != null)
                {
                    if (response.Body.Status.ErrCode == "14201")//验证码不匹配
                    {
                        code = RspCode.RspCode_1202;
                    }
                    else if (response.Body.Status.ErrCode == "14200" || response.Body.Status.ErrCode == "14202")//047:5次失效 048：验证码失效
                    {
                        code = RspCode.RspCode_1203;
                    }
                    return new Response(RspType.ParameterError, code, response.Body.Status.ErrMsg, "", response.Body.Status.ErrCode);
                }
                return new Response(RspType.ParameterError, RspCode.RspCode_3001, "验证码校验失败");
            }
        }
        #endregion
** soa

        #region 8.确认验证码[ConfirmVerificationCode]

        /// <summary>
        /// 确认验证码(新版),调用CommonInterface
        /// </summary>
        /// <param name="Params"></param>
        /// <returns></returns>
        public static SOAResponseEntity<SoaMemberVaild::MatchValidateCodeResponse> ConfirmVerificationCode_New(MembershipParams parameter)
        {
            RequestHeaderEntity header = new RequestHeaderEntity("MatchValidateCode", 1);
            SoaMemberVaild::MatchValidateCodeRequest request = new SoaMemberVaild::MatchValidateCodeRequest()
            {
                Act = new SoaMemberVaild::Act()
                {
                    AppKey = parameter.MemberAppKey,
                    AppSecret = parameter.MemberAppSecret
                },
                VerificationCode = parameter.VerifyCode,
                MemberSystem = 0,
                Mobile = parameter.Mobile
            };
            if(parameter.MobileType == "0")
            {
                //找回密码的时候匹配要传会员Id,因为生成的时候NeedVaildMobile为true
                if (parameter.MemberId > 0)
                {
                    request.MemberId = parameter.MemberId;
                }
            }
            if (parameter.AppPlat == "1")//朋友去哪
            {
                request.PlatId = 1;
                request.SysFunction = 153;
            }
            else
            {
                request.PlatId = 418;//与生成验证码时匹配
                request.SysFunction = 600;//与生成验证码时匹配
            }
            var response = SOAHttpHelper.GetResposne<SoaMemberVaild::MatchValidateCodeResponse>(request, header);
            return response;
        }
        #endregion
