
        /// <summary>
        /// 大搜索 @朱进
        /// </summary>
        /// <param name="Params">搜索条件</param>
        /// <returns></returns>
        public static List<LineSingleEntity> Search(QueryParams Params)
        {
            //if (Params.WifiIdList.IsEmpty())
            //{
            //    return null;
            //}
            InteractionParamsSet(Params);
            string xmlResult = AbroadQuerySoaInterface.GetNewLineSingleList(Params);
            if (xmlResult.IsEmpty())
            {
                return null;
            }
            List<LineSingleEntity> lineSingleEntities =
                xmlResult.GetNodeList("response/lineList/line").Fill(xnL => FillLineSingleEntity(Params, xnL));

            return lineSingleEntities.Fill(p => p).ToListEx();
        }



    public class LineSingleEntity
    {
        #region Overrides of Object

        public override string ToString()
        {
            return productId.ToStringEx();
        }

        #endregion

        private List<LabelsEntity> _labelsList = new List<LabelsEntity>();

        private string _ordCount = string.Empty;

        private string _preorderRemark = string.Empty;

        private string _takeMachinePointCount = string.Empty;

        private string _preorderDate = string.Empty;

        public string Delta
        {
            get
            {
                return this._delta;
            }
            set
            {
                this._delta = value;
            }
        }

        [JsonProperty(PropertyName = "preorderDate")]
        public string PreorderDate
        {
            get
            {
                return this._preorderDate;
            }
            set
            {
                this._preorderDate = value;
            }
        }

        [JsonProperty(PropertyName = "serverDateTime")]
        public string ServerDateTime
        {
            get
            {
                return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss,fff");
            }
            private set { }
        }

        [JsonProperty(PropertyName = "preorderRemark")]
        public string PreorderRemark
        {
            get
            {
                return this._preorderRemark;
            }
            set
            {
                this._preorderRemark = value;
            }
        }
        [JsonProperty(PropertyName = "takeMachinePointCount")]
        public string TakeMachinePointCount
        {
            get
            {
                return this._takeMachinePointCount;
            }
            set
            {
                this._takeMachinePointCount = value;
            }
        }
        private string m_productId = string.Empty;
        /// <summary>
        /// 产品id
        /// </summary>
        public string productId
        {
            get { return m_productId; }
            set { m_productId = value; }
        }

        private string m_mainTitle = string.Empty;
        /// <summary>
        /// 标题
        /// </summary>
        public string mainTitle
        {
            get { return m_mainTitle; }
            set { m_mainTitle = value; }
        }

        private string m_subTitle = string.Empty;
        /// <summary>
        /// 副标题
        /// </summary>
        public string subTitle
        {
            get { return m_subTitle; }
            set { m_subTitle = value; }
        }

        private string m_tcPrice = string.Empty;
        /// <summary>
        /// 同程价
        /// </summary>
        public string tcPrice
        {
            get { return m_tcPrice; }
            set { m_tcPrice = value; }
        }

        private string m_imgUrl = string.Empty;
        /// <summary>
        /// 线路图片
        /// </summary>
        public string imgUrl
        {
            get { return m_imgUrl; }
            set { m_imgUrl = value; }
        }

        private string m_productDetailLink = string.Empty;
        /// <summary>
        /// 详情页跳转链接
        /// </summary>
        public string productDetailLink
        {
            get { return m_productDetailLink; }
            set { m_productDetailLink = value; }
        }

        private string m_playTheme = string.Empty;
        /// <summary>
        /// 游玩主题
        /// </summary>
        public string playTheme
        {
            get { return m_playTheme; }
            set { m_playTheme = value; }
        }

        private string m_dcDpCount = string.Empty;
        /// <summary>
        /// 点评条数
        /// </summary>
        public string dcDpCount
        {
            get { return m_dcDpCount; }
            set { m_dcDpCount = value; }
        }

        private string m_dcDegreeLevel = string.Empty;

        private string _delta = string.Empty;

        private string _takeMachinePointCountText = string.Empty;

        private int _sort = 0;

        private string _commentsBottom = string.Empty;

        private string _singleCategory = string.Empty;

        private string _singleType = string.Empty;

        private string _singleCategoryName = string.Empty;

        private string _singleTypeName = string.Empty;

        private string _abtest = string.Empty;

        private string _tag = string.Empty;

        /// <summary>
        /// 点评满意度
        /// </summary>
        public string dcDegreeLevel
        {
            get { return m_dcDegreeLevel; }
            set { m_dcDegreeLevel = value; }
        }


        /// <summary>
        /// 标签列表
        /// </summary>
        public List<LabelsEntity> labelsList
        {
            get { return _labelsList; }
            set { _labelsList = value; }
        }

        [JsonProperty(PropertyName = "ordCount")]
        public string OrdCount
        {
            get
            {
                return this._ordCount;
            }
            set
            {
                this._ordCount = value;
            }
        }

        [JsonIgnore]
        public string TakeMachinePointCountText
        {
            get
            {
                return this._takeMachinePointCountText;
            }
            set
            {
                this._takeMachinePointCountText = value;
            }
        }

        [JsonIgnore]
        public int sort
        {
            get
            {
                return this._sort;
            }
            set
            {
                this._sort = value;
            }
        }

        public string commentsBottom
        {
            get
            {
                return this._commentsBottom;
            }
            set
            {
                this._commentsBottom = value;
            }
        }

        public string singleCategory
        {
            get
            {
                return this._singleCategory;
            }
            set
            {
                this._singleCategory = value;
            }
        }

        public string singleType
        {
            get
            {
                return this._singleType;
            }
            set
            {
                this._singleType = value;
            }
        }

        public string singleCategoryName
        {
            get
            {
                return this._singleCategoryName;
            }
            set
            {
                this._singleCategoryName = value;
            }
        }

        public string singleTypeName
        {
            get
            {
                return this._singleTypeName;
            }
            set
            {
                this._singleTypeName = value;
            }
        }

        public string abtest
        {
            get
            {
                return this._abtest;
            }
            set
            {
                this._abtest = value;
            }
        }

        public string tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }

        public string productCategory { get; set; }

        public string productType { get; set; }

        public string dest { get; set; }
    }


        /// <summary>
        /// 装载字段
        /// </summary>
        /// <param name="Params"></param>
        /// <param name="xnL"></param>
        /// <returns></returns>
        private static LineSingleEntity FillLineSingleEntity(QueryParams Params, XmlNode xnL)
        {
            LineSingleEntity model = new LineSingleEntity();
            Set802WifiListField(Params, model, xnL);

            model.productId = XmlHelper.GetNodeText(xnL, "id");
            model.tcPrice = XmlHelper.GetNodeText(xnL, "minTcPrice");

            if (model.tcPrice.IsEmpty())
            {
                string pricelistXml = xnL.Get("pricelist");
                XmlNodeList priceNodeList = pricelistXml.GetNodeList("price");
                List<int> tcPriceList = priceNodeList.Fill(n => n.Get("tcPrice").ToInt());
                int minimumPrice = tcPriceList.Min();
                model.tcPrice = minimumPrice.ToStringEx();
            }

            model.imgUrl = ImageUtility.GetImagePath(XmlHelper.GetNodeText(xnL, "imgUrl"), "172x172");
            model.mainTitle = XmlHelper.GetNodeText(xnL, "title");
            model.subTitle = XmlHelper.GetNodeText(xnL, "subTitle");
            model.productDetailLink = ABTestLink(Params, model.productId, model.singleType,model.singleCategory);
            model.playTheme = XmlHelper.GetNodeText(xnL, "singleTypeName").ToStringEx().Replace("通讯工具", "通讯WIFI");
            string commentsBottom = FormatCommentsBottom(xnL);
            model.tag = xnL.Get("recdTagName").Trim().ToStringEx();
            model.dcDegreeLevel = FormatSatDeg(xnL);
            model.dcDpCount = FormatDcDpCount(xnL);
            model.commentsBottom = commentsBottom;
            return model;
        }



    public static class XmlNodeListExtension
    {
        public static List<T> Fill<T>(this XmlNodeList source, Func<XmlNode, T> func)
        {
            if (source==null||source.Count==0)
            {
                return null;
            }
            List<T> list = new List<T>(source.Count);
            foreach (XmlNode node in source)
            {
                T item = func.Try(node);
                if (item!=null)
                {
                    list.Add(item);
                }
            }
            return list.IsNull(null);
        } 
    }
