(ns website.core)

;; (defn -main
;;   []
;;   (println "hello"))

(defn lazy-seq-fibo 
    ([] 
        (concat [0 1] (lazy-seq-fibo 0 1)))
    ([a b] 
        (let [n (+ a b)] 
            (lazy-seq 
                (cons n (lazy-seq-fibo b n))))))


(take 10 (lazy-seq-fibo))



(for [version-type '(Android iPhone)
      version-number (range 700 901)]

  [(str
    "public ClientInfo "
    version-type
    version-number
    " = new ClientInfo{"
    "VersionType = \""
    version-type
    "\",VersionNumber = \""
    version-number
    "\",ClientIp = "
    "\"127.0.0.1\""
    "\"}\n")])



;; M-.: Jump to the definition of a var
;; M-TAB or C-c TAB: Autocomplete symbol at point
;; C-x C-e: Eval the form under the point
;; C-c C-k: Compile the current buffer
;; C-c C-l: Load current buffer and force required namespaces to reload
;; C-M-x: Compile the whole top-level form under the point.
;; C-c S-i: Inspect a value
;; C-c C-m: Macroexpand the call under the point
;; C-c C-d C-d: Look up documentation for a var
;; C-c C-z: Switch from a Clojure buffer to the repl buffer
;; C-c M-p: Switch the repl namespace to match the current buffer
;; C-c C-w c: List all callers of a given function


(println "hello")

