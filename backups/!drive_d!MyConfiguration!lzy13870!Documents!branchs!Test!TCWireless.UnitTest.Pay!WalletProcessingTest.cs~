using TCWireless.Domain.Wallet;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using TCWireless.Parameter.Wallet;
using TCWireless.Component.Framework.Model;
using System.Data;
using Microsoft.QualityTools.Testing.Fakes;
using TCWireless.Component.Utility;
using TCWireless.Data.DataAccess.Pay.Fakes;
using System.Fakes;
using System.IO;
using TCWireless.Model;
using System.Collections.Generic;

namespace TCWireless.UnitTest.Pay
{
    /// <summary>
    ///这是 WalletProcessingTest 的测试类，旨在
    ///包含所有 WalletProcessingTest 单元测试
    ///</summary>
    [TestClass()]
    public class WalletProcessingTest : TestBase
    {
        /// <summary>
        ///WalletMain 的测试
        ///</summary>
        [TestMethod()]
        public void WalletMainTestPass()
        {
            using (ShimsContext.Create())
            {
                // 前提条件
                ShimDateTime.NowGet = () => DateTime.Parse("2015-11-18");

                WalletParameters parameter = new WalletParameters()
                {
                    memberId = 103343708,
                    ClientInfo =
                        new ClientInfo()
                        {
                            VersionType = "iPhone",
                            VersionNumber = "8.0.0"
                        },
                    jumpType = 1
                };
                string expected = "查询成功";
                string actual;
                // 执行
                actual = WalletProcessing.WalletMain(parameter).ResDesc;
                Assert.AreEqual(expected, actual);
            }
        }
        /// <summary>
        ///WalletMain 的测试
        ///</summary>
        [TestMethod()]
        public void WalletMainTestContentPass()
        {
            WalletParameters parameter = new WalletParameters()
            {
                memberId = 103343708,
                ClientInfo =
                    new ClientInfo()
                    {
                        VersionType = "iPhone",
                        VersionNumber = "8.0.0"
                    },
                jumpType = 1
            };
            string expected = "{\"ResType\":0,\"ResCode\":0,\"ResDesc\":\"查询成功\",\"Body\":{\"amountText\":\"请求发生错误[操作超时]\",\"buttonSettingsRedirectUrl\":\"\",\"buttonSettingsText\":\"\",\"headerRedirectUrl\":\"\",\"qaRedirectUrl\":\"\",\"qaTitleText\":\"\",\"titleText\":\"同同宝\",\"mainPannel\":[{\"optionAmountText\":\"￥39\",\"optionIcon\":\"\",\"optionTitle\":\"红包\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"红包\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"2\"},{\"optionAmountText\":\"远程服务器返回错误: (403) 已禁止。\",\"optionIcon\":\"\",\"optionTitle\":\"奖金\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"奖金\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"3\"},{\"optionAmountText\":\"远程服务器返回错误: (403) 已禁止。\",\"optionIcon\":\"\",\"optionTitle\":\"立返\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"立返\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"4\"},{\"optionAmountText\":\"0张\",\"optionIcon\":\"\",\"optionTitle\":\"电子票\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"电子票\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"5\"},{\"optionAmountText\":\"0张\",\"optionIcon\":\"\",\"optionTitle\":\"卡券\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"卡券\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"6\"},{\"optionAmountText\":\"0张\",\"optionIcon\":\"\",\"optionTitle\":\"银行卡\",\"optionTitleColor\":\"\",\"optionDescriptionColor\":\"\",\"optionDescription\":\"银行卡\",\"optionRedirectUrl\":\"\",\"optionProductType\":\"7\"}],\"settings\":[],\"description\":\"同同宝\",\"descriptionColor\":\"\",\"icon\":\"\",\"productType\":\"1\"},\"ResLog\":\"\",\"RspDescForDev\":\"\",\"APIErrorCode\":\"\",\"SOARequestTime\":null}";
            string actual = WalletProcessing.WalletMain(parameter).ToJson();
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///WalletMain 的测试
        ///</summary>
        [TestMethod()]
        public void WalletMainTest()
        {
            using (ShimsContext.Create())
            {
                ShimWalletDA.GetWalletMainStringStringString = (platformId, jumpType, versionNo) =>
                    {
                        return null;
                    };
                WalletParameters parameter = new WalletParameters()
                                                 {
                                                     ClientInfo =
                                                         new ClientInfo()
                                                             {
                                                                 VersionType = "iPhone",
                                                                 VersionNumber = "8.0.0"
                                                             },
                                                     jumpType = 1
                                                 };
                string expected = "查询失败(读取配置出错)";
                string actual;
                actual = WalletProcessing.WalletMain(parameter).ResDesc;
                Assert.AreEqual(expected, actual);
            }
        }

        /// <summary>
        ///WalletMain 的测试
        ///</summary>
        [TestMethod()]
        public void WalletMainTestNewDataTable()
        {
            using (ShimsContext.Create())
            {
                ShimWalletDA.GetWalletMainStringStringString = (platformId, jumpType, versionNo) => new DataSet();
                WalletParameters parameter = new WalletParameters()
                                                 {
                                                     ClientInfo =
                                                         new ClientInfo()
                                                             {
                                                                 VersionType = "iPhone",
                                                                 VersionNumber = "8.0.0"
                                                             },
                                                     jumpType = 1
                                                 };
                string expected = "查询失败(读取配置出错)";
                string actual;
                actual = WalletProcessing.WalletMain(parameter).ResDesc;
                Assert.AreEqual(expected, actual);
            }
        }

        /// <summary>
        ///GetCommonCard 的测试
        ///</summary>
        [TestMethod()]
        public void GetCommonCardTestPass()
        {
            WalletParameters parameter = new WalletParameters() { ClientInfo = iPhone800 };
            string expected = string.Empty;
            string actual;
            actual = WalletProcessing.GetCommonCard(parameter);
            Assert.AreEqual(expected, actual);
        }

        /// <summary>
        ///FillWalletMainPannel 的测试
        ///</summary>
        [TestMethod()]
        public void FillWalletMainPannelTest()
        {
            WalletParameters parameter = new WalletParameters()
                                             {
                                                 ClientInfo = Android800,
                                                 memberId = MemberID,
                                                 jumpType = 1
                                             }; // TODO: 初始化为适当的值
            DataTable walletMain = new DataTable(); // TODO: 初始化为适当的值
            walletMain.Columns.Add("")

            //pannel.optionProductType = row["WSPISubProductType"].ToStringEx();
            //pannel.optionTitle = row["WSPIShowName"].ToStringEx(); // 显示名称
            //pannel.optionIcon = row["WSPIIcon"].ToStringEx(); // 图标
            //pannel.optionTitleColor = row["WSPITitleColor"].ToStringEx(); // 标题颜色
            //pannel.optionDescriptionColor = row["WSPIDescriptionColor"].ToStringEx(); // 描述颜色
            //pannel.optionDescription = row["WSPIDescription"].ToStringEx(); // 描述
            //pannel.optionRedirectUrl = row["WSPIJumpUrl"].ToStringEx(); // 跳转链接

            List<MainPannel> expected = null; // TODO: 初始化为适当的值
            List<MainPannel> actual;
            actual = WalletProcessing.FillWalletMainPannel(parameter, walletMain);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("验证此测试方法的正确性。");
        }
    }
}