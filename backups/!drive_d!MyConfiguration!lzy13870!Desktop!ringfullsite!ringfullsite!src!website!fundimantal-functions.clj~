(ns website.fundimantal-functions
  (:use [clojure.java.io])
  (:use [clojure.java.shell :only [sh]])
  (:use [clojure.string :only [join]])
  (:use [clojure.java.shell :only [sh]])
  ;; (:use [clj-excel.core])
  (:use [clojure.xml])
  (:require [clojure.data.json :as json])
  (:require [clj-http.client :as client])
  (:require [clj-http.cookies :as cookies])
  (:require [clj-time.format :as f])
  (:require [clj-time.coerce :as c])
  (:require [clj-time.local :as l])
  (:require [clj-time.periodic :as p])
  (:require [clojure.pprint :as ppt]))


(def service-name #(-> % :request :header :serviceName))
(def config
  "Global configuration entity."
  (load-file
   "d:/MyConfiguration/lzy13870/Desktop/ringfullsite/ringfullsite/src/website/config.clj"))

(def vm-abroadactivity
  "Virtual machine abroadactivity url."
  (str (-> config :domains :vm)
       (-> config :handlers :abroadactivity)))

(defn call[url input]
  (->
   "http://localhost:8008/abroadactivity/default.aspx"
   (client/post {:form-params {:url url :input input}})
   :body))

(defn save-request[request output]
  (let [client-info-summary (str
                             \- (-> request :request :header :serviceName)
                             \- (-> request :request :body :clientInfo :versionType)
                             \- (-> request :request :body :clientInfo :versionNumber)
                             \- (-> request :request :body :clientInfo :networkType)
                             \- (l/format-local-time (l/local-now) :date)
                             ".clj")
        build-path #(str (-> config :project-folder) "/" % client-info-summary)]
    (spit (build-path "request") (str request))
    (spit (build-path "response") (str (json/read-str output :key-fn keyword)))))

(defn call-service [params service client version url]
  (let [request {:request
                 {:body
                  (into {:clientInfo
                         {:deviceId "dba6b58da9a4fab008566a3b835dadb422139a6e",
                          :extend (str "2^com.tongcheng." client ",4^9.0.2,5^" client "6_2"),
                          :mac "cacdca6fcf78998b8ba745400a0eb92c",
                          :refId "5866741",
                          :versionType (str client),
                          :clientIp "10.6.2.52",
                          :networkType "wifi",
                          :versionNumber (clojure.string/join "." (clojure.string/split version #""))}}
                        params),
                  :header {:accountID "5ee7b429-b8c6-400f-8b87-3c384c4ea68a",
                           :encryptEffort "0",
                           :serviceName (str service),
                           :reqTime "1444725647927",
                           :version "20110303090115"}}}
        ]
    ;; (println url)
    ;; (println (json/write-str request))
    (call url (json/write-str request))
    ))
(defn call-default[sv params] (call-service params sv 'iphone "804" (str (-> config :domains :vm) (-> config :handlers :abroadactivity))))
(defn call-8008[sv params] (call-service params sv 'iphone "804" (str (-> config :domains :test8008) (-> config :handlers :abroadactivity))))

